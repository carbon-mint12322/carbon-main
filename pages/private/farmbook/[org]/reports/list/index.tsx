// Generated code (tools/templates/pages/model-page-endpoint.tsx.mustache)
// export { default } from '~/gen/pages/farmersList/ui'

import React, { useMemo, useState } from 'react';
import axios from 'axios';

import { Paper, Box } from '@mui/material';
import {
  GridRenderCellParams,
  GridColDef,
  GridValueGetterParams,
  GridRowParams,
} from '@mui/x-data-grid';

import DataGrid from '~/components/lib/DataDisplay/DataGrid';
import ListAction from '~/components/lib/ListAction';

import withAuth from '~/components/auth/withAuth';
import TitleBarGeneric from '~/components/TitleBarGeneric';
import { initialTitleBarContextValues } from '~/contexts/TitleBar/TitleBarContext';
import { useOperator } from '~/contexts/OperatorContext';
import { useAlert } from '~/contexts/AlertContext';

import globalStyles from '~/styles/theme/brands/styles';

import CustomFooter from '~/components/CustomFooter';
import GenerateReportDialog, {
  DateRange,
  DocumentStatusTypeEnum,
  ReportTypeEnum,
  reportTypeList,
} from '~/container/reports/GenerateReportDialog';
import useFetch from 'hooks/useFetch';
import DownloadCSVButton from '~/container/reports/DownloadCSV';
import { filterDataByCustomKeys } from '~/components/lib/FilterDataByCustomKeys';
import If from '~/components/lib/If';
import { stringDateFormatter } from '~/utils/dateFormatter';
import FileLink from '~/container/reports/FileLink';

export { default as getServerSideProps } from '~/utils/ggsp';

function ReportsList() {
  const [searchValue, setSearchValue] = useState('');
  const [titleBarData, setTitleBarData] = useState<any>({
    isTitleBarPresent: true,
    title: 'Reports',
    mainBtnTitle: 'Generate Report',
    isTitlePresent: true,
    isSubTitlePresent: true,
    isSearchBarPresent: true,
    isMainBtnPresent: true,
  });
  const [open, setOpen] = useState(false);
  const { getApiUrl, getAPIPrefix } = useOperator();
  const { openToast } = useAlert();

  const API_URL = getAPIPrefix() + '/reports';
  const { isLoading: loading, data, reFetch } = useFetch<any>(API_URL);

  React.useEffect(() => {
    setTitleBarData({
      ...titleBarData,
      subTitle: `Showing ${data?.length || 0} Reports in total`,
    });
  }, [data]);

  const handleOnClose = () => {
    setOpen(false);
  };

  const handleOpenModal = () => {
    setOpen(true);
  };

  const handleSearch = (value: any) => {
    setSearchValue(value);
  };

  const searchData = useMemo(() => {
    if (searchValue?.length > 0) {
      return filterDataByCustomKeys(data, searchValue, ['reportName', 'createdAt']);
    }
    return data;
  }, [searchValue, data]);

  const handleGenerateReportSubmit = async (
    reportName: string,
    reportType: ReportTypeEnum,
    documentStatus: DocumentStatusTypeEnum,
    customFields: string[],
    dateRange?: DateRange,
    collective?: string,
  ) => {
    try {
      const res = await axios.post(getApiUrl('/reports'), {
        reportName,
        reportType,
        dateRange,
        ...(customFields?.length ? { customFields } : {}),
        documentStatus,
        collective,
      });
      if (res) {
        openToast('success', 'Generate Report');
        reFetch(API_URL);
      }
    } catch (error: any) {
      openToast(
        'error',
        error?.response?.data?.error?.message || error?.message || 'Something went wrong',
      );
    } finally {
      setOpen(false);
    }
  };

  function renderDownloadCell(params: GridRenderCellParams) {
    return <DownloadCSVButton id={params.row._id} reportUrl={params.row.reportUrl} />;
  }

  function renderActionCell(params: GridRenderCellParams) {
    return (
      <ListAction
        canActivate={false}
        canEdit={false}
        canDelete={true}
        isActive={params.row.active}
        id={params.row.id}
        schema={'reports'}
      />
    );
  }

  function renderFileLink(params: GridRenderCellParams) {
    return <FileLink fileName={params.row.reportName} fileUrl={params.row.reportUrl} />;
  }

  const reportTypeNaming: { [key: string]: string } = useMemo(() => {
    return reportTypeList.reduce(
      (acc, item) => ({
        ...acc,
        [item.value]: item.label,
      }),
      {},
    );
  }, [reportTypeList]);

  const columns: GridColDef[] = [
    {
      field: 'reportType',
      headerName: 'Report Type',
      minWidth: 220,
      flex: 1,
      valueGetter: (params: GridValueGetterParams) =>
        `${reportTypeNaming?.[params.row.reportType] || ''}`,
      hideable: false,
    },
    {
      field: 'createdAt',
      headerName: 'Generated On',
      minWidth: 200,
      flex: 1,
      valueGetter: (params: GridValueGetterParams) => stringDateFormatter(params.row.createdAt),
    },
    {
      field: 'createdBy',
      headerName: 'Generated by',
      minWidth: 200,
      flex: 1,
      valueGetter: (params: GridValueGetterParams) => `${params.row.createdBy || ''}`,
    },
    {
      field: 'reportName',
      headerName: 'Report',
      minWidth: 220,
      flex: 1,
      renderCell: renderFileLink,
      hideable: false,
    },
  ];

  return (
    <>
      <TitleBarGeneric
        titleBarData={titleBarData}
        handleSearch={handleSearch}
        handleMainBtnClick={handleOpenModal}
      />
      <Paper elevation={0}>
        <Box style={globalStyles.dataGridLayer}>
          <DataGrid
            columns={columns}
            rows={searchData || []}
            getRowId={(row) => row._id}
            disableColumnSelector={false}
            isRowSelectable={(params: GridRowParams) => false}
            rowHeight={64}
            disableSelectionOnClick
            sx={globalStyles.datagridSx}
            getRowClassName={(params: GridRowParams) =>
              `${!params.row.active ? 'datagridrowhover disabled-row' : 'datagridrowhover'}`
            }
            components={{
              Footer: CustomFooter,
            }}
            loading={loading}
          />

          <If value={open}>
            <GenerateReportDialog
              open={open}
              onClose={handleOnClose}
              onSubmit={handleGenerateReportSubmit}
            />
          </If>
        </Box>
      </Paper>
    </>
  );
}

export default withAuth(ReportsList);

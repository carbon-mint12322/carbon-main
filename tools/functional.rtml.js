// Generated by CoffeeScript 2.7.0
(function () {
  // Convert a widget to a plain object
  var Composite, Tag, Widget, convertIfString, dumpHierarchy, parseShortcut, toObject, toWidget;

  toObject = (widget) => {
    return {
      tag: widget.tag,
      props: widget.props,
      children: widget.children.map((w) => {
        return w.toObject();
      }),
    };
  };

  // Convert a widget to a plain object
  dumpHierarchy = (widget) => {
    var childrenHierarchy;
    console.log('W', widget, widget.toObject);
    childrenHierarchy = toWidget(widget).children.map((w) => {
      return w.dumpHierarchy();
    });
    return {
      [widget.tag]: childrenHierarchy,
    };
  };

  convertIfString = (x) => {
    if (typeof x === 'string') {
      return Widget('PlainText', {
        text: x,
      });
    } else {
      return x;
    }
  };

  toWidget = (x) => {
    if (x.toWidget) {
      return x.toWidget();
    } else {
      return x;
    }
  };

  // Composite -> Widget -> Composite
  //   OR
  // Composite -> Widget[] -> Composite
  Composite = (parent) => {
    return (child) => {
      var children, composite, parentWidget, widget;
      console.log('1. parent[', parent, ']child', child);
      if (Array.isArray(child)) {
        children = child;
      } else {
        children = [child];
      }
      children = children.map(toWidget).map(convertIfString);
      parentWidget = toWidget(parent);
      console.log('2. parent[', parent, ']child', child);
      widget = {
        ...parent,
        children: [...parentWidget.children, ...children],
      };
      composite = Composite(widget); // new node
      composite.toObject = () => {
        return toObject(widget);
      };
      composite.dumpHierarchy = (indent) => {
        return dumpHierarchy(widget);
      };
      return composite;
    };
  };

  // (tag, props, children) -> Widget
  Widget = (tag, props = {}, children = []) => {
    var fn, w;
    w = {
      tag: tag,
      props: props,
      children: children,
      toObject: () => {
        return {
          tag: tag,
          props: props,
          children: children,
        };
      },
      dumpHierarchy: () => {
        return tag;
      },
    };
    fn = (parent) => {
      return Composite(parent(w));
    };
    fn.toWidget = () => {
      return w;
    };
    return fn;
  };

  Tag = (tag) => {
    return Widget(tag);
  };

  parseShortcut = (str) => {};

  // Examples:
  //	Stack->Grid->Paper (Paper inside Grid, Grid inside Stack)
  //	Stack->[Top, Middle, Bottom]
  //	Stack->[Logo,Title,Menu], [LeftMenu, ContentArea], [PoweredBy, Copyright]

  //   Stack
  //		Grid {container: true, xs: 12}  # topbar
  //			Grid { item: true, xs: 4}
  //				Logo
  //			Grid { item: true, xs: 4}
  //				Title
  //			Grid { item: true, xs: 4}
  //				Menu
  //		Grid {container: true, xs: 12}   # middle content
  //			Grid { item: true, xs: 4}
  //				LeftMenu
  //			Grid { item: true, xs: 8}
  //				ContentArea
  //		Grid {container: true, xs: 12}   # bottom bar
  //			Stack
  //				Poweredby
  //				Copyright

  //	Stack -> [Grid12 ->
  //				[Grid4 -> Logo, Grid4 -> Title, Grid4 -> Menu],
  //			 [Grid12 ->
  //				[Grid4 -> Grid4 -> LeftMenu],
  //				[Grid8 -> ContentArea]],
  //			 [Grid12 ->
  //				Stack -> [LeftMenu, Copyright]]

  module.exports = { Widget, Composite, Tag, dumpHierarchy };
}.call(this));

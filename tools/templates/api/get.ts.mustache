import { NextApiRequest, NextApiResponse } from 'next'
import { getGetRoles, withPermittedRoles, withPermittedRolesGssp } from "~/backendlib/rbac"
import { httpGetHandler } from "~/backendlib/middleware/get-handler"
import withMongo from "~/backendlib/middleware/with-mongo"
import withDebug from "~/backendlib/middleware/with-debug"
import { getModel } from "~/backendlib/db/adapter";

const schemaId = "{{{schemaId}}}";
const modelApi = getModel(schemaId);
export const permittedRoles = getGetRoles(schemaId)

export const get = async (id: string) => modelApi.get(id);
export const getMulti = async (ids: string[]) => modelApi.getMulti(ids);

const _getGssp = async (context: any) => {
  try {
    const obj = await get(context.params.id);
    if (!obj) {
      return {
        //https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props
        notFound: true
      }
		}
		return { props: { data: obj } };
  } catch (err) {
    return {
      redirect: {
        destination: '/error',
        permanent: false,
      }
    }
  }
}

const handler = async (req: NextApiRequest, res: NextApiResponse): Promise<any> => {
  res.setHeader('Content-Type', 'application/json');
  const {id} : { id: string } = req.query as any;
	if (!id) {
		 return res.status(400).json({error: "id required"});
	}
  const result =  await get(id);
  res.status(200).json(result.data || result);
}


// Enforces role check
const wrap  = withPermittedRoles(permittedRoles)

// Wrap in post-handler, which permits http posts only 
export default withDebug(wrap(httpGetHandler(withMongo(handler))));

// Permission wrapping for getServerSideProps
const wrapGssp  = withPermittedRolesGssp(permittedRoles)
export const getGssp = wrapGssp(_getGssp);
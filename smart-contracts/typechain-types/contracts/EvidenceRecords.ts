/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace EvidenceRecords {
  export type RecordStruct = {
    uri: PromiseOrValue<string>;
    hash: PromiseOrValue<string>;
    userId: PromiseOrValue<string>;
    userName: PromiseOrValue<string>;
    latitude: PromiseOrValue<BigNumberish>;
    longitude: PromiseOrValue<BigNumberish>;
    ts: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    locked: PromiseOrValue<boolean>;
  };

  export type RecordStructOutput = [
    string,
    string,
    string,
    string,
    number,
    number,
    number,
    string,
    boolean
  ] & {
    uri: string;
    hash: string;
    userId: string;
    userName: string;
    latitude: number;
    longitude: number;
    ts: number;
    recipient: string;
    locked: boolean;
  };
}

export interface EvidenceRecordsInterface extends utils.Interface {
  functions: {
    "createRecord((string,string,string,string,int32,int32,int32,address,bool),address)": FunctionFragment;
    "evidenceLookup(string)": FunctionFragment;
    "isExists(string)": FunctionFragment;
    "isLocked(string)": FunctionFragment;
    "isUserRecord(string,address)": FunctionFragment;
    "lockRecord(string)": FunctionFragment;
    "lookup(string)": FunctionFragment;
    "updateRecord((string,string,string,string,int32,int32,int32,address,bool),address)": FunctionFragment;
    "uriList(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createRecord"
      | "evidenceLookup"
      | "isExists"
      | "isLocked"
      | "isUserRecord"
      | "lockRecord"
      | "lookup"
      | "updateRecord"
      | "uriList"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createRecord",
    values: [EvidenceRecords.RecordStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "evidenceLookup",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLocked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserRecord",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lookup",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecord",
    values: [EvidenceRecords.RecordStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uriList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evidenceLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lookup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uriList", data: BytesLike): Result;

  events: {
    "LogLocked(address,string)": EventFragment;
    "LogNewRecord(address,string,address)": EventFragment;
    "LogRecordUpdate(address,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNewRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRecordUpdate"): EventFragment;
}

export interface LogLockedEventObject {
  sender: string;
  evidence: string;
}
export type LogLockedEvent = TypedEvent<[string, string], LogLockedEventObject>;

export type LogLockedEventFilter = TypedEventFilter<LogLockedEvent>;

export interface LogNewRecordEventObject {
  sender: string;
  evidence: string;
  recipient: string;
}
export type LogNewRecordEvent = TypedEvent<
  [string, string, string],
  LogNewRecordEventObject
>;

export type LogNewRecordEventFilter = TypedEventFilter<LogNewRecordEvent>;

export interface LogRecordUpdateEventObject {
  sender: string;
  evidence: string;
  recipient: string;
}
export type LogRecordUpdateEvent = TypedEvent<
  [string, string, string],
  LogRecordUpdateEventObject
>;

export type LogRecordUpdateEventFilter = TypedEventFilter<LogRecordUpdateEvent>;

export interface EvidenceRecords extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EvidenceRecordsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createRecord(
      evidence: EvidenceRecords.RecordStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    evidenceLookup(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        number,
        number,
        number,
        string,
        boolean
      ] & {
        uri: string;
        hash: string;
        userId: string;
        userName: string;
        latitude: number;
        longitude: number;
        ts: number;
        recipient: string;
        locked: boolean;
      }
    >;

    isExists(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    isLocked(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    isUserRecord(
      uri: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockRecord(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lookup(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[EvidenceRecords.RecordStructOutput]>;

    updateRecord(
      evidence: EvidenceRecords.RecordStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uriList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  createRecord(
    evidence: EvidenceRecords.RecordStruct,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  evidenceLookup(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      number,
      number,
      number,
      string,
      boolean
    ] & {
      uri: string;
      hash: string;
      userId: string;
      userName: string;
      latitude: number;
      longitude: number;
      ts: number;
      recipient: string;
      locked: boolean;
    }
  >;

  isExists(
    uri: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLocked(
    uri: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserRecord(
    uri: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockRecord(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lookup(
    uri: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<EvidenceRecords.RecordStructOutput>;

  updateRecord(
    evidence: EvidenceRecords.RecordStruct,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uriList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createRecord(
      evidence: EvidenceRecords.RecordStruct,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    evidenceLookup(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        number,
        number,
        number,
        string,
        boolean
      ] & {
        uri: string;
        hash: string;
        userId: string;
        userName: string;
        latitude: number;
        longitude: number;
        ts: number;
        recipient: string;
        locked: boolean;
      }
    >;

    isExists(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLocked(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserRecord(
      uri: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockRecord(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lookup(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<EvidenceRecords.RecordStructOutput>;

    updateRecord(
      evidence: EvidenceRecords.RecordStruct,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uriList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "LogLocked(address,string)"(
      sender?: null,
      evidence?: null
    ): LogLockedEventFilter;
    LogLocked(sender?: null, evidence?: null): LogLockedEventFilter;

    "LogNewRecord(address,string,address)"(
      sender?: null,
      evidence?: null,
      recipient?: null
    ): LogNewRecordEventFilter;
    LogNewRecord(
      sender?: null,
      evidence?: null,
      recipient?: null
    ): LogNewRecordEventFilter;

    "LogRecordUpdate(address,string,address)"(
      sender?: null,
      evidence?: null,
      recipient?: null
    ): LogRecordUpdateEventFilter;
    LogRecordUpdate(
      sender?: null,
      evidence?: null,
      recipient?: null
    ): LogRecordUpdateEventFilter;
  };

  estimateGas: {
    createRecord(
      evidence: EvidenceRecords.RecordStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    evidenceLookup(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExists(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocked(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserRecord(
      uri: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockRecord(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lookup(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateRecord(
      evidence: EvidenceRecords.RecordStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uriList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRecord(
      evidence: EvidenceRecords.RecordStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    evidenceLookup(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExists(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserRecord(
      uri: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockRecord(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lookup(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateRecord(
      evidence: EvidenceRecords.RecordStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uriList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
